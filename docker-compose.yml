services:
  # Infrastructure Services (existing)
  postgres-gitlab:
    image: postgres:16-alpine
    container_name: postgres-gitlab
    environment:
      POSTGRES_USER: gitlab
      POSTGRES_PASSWORD: gitlab123
      POSTGRES_DB: gitlabhq_production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitlab"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_gitlab_data:/var/lib/postgresql/data
    networks:
      - devops-network
    restart: unless-stopped

  postgres-sonar:
    image: postgres:16-alpine
    container_name: postgres-sonar
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar123
      POSTGRES_DB: sonarqube
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_sonar_data:/var/lib/postgresql/data
    networks:
      - devops-network
    restart: unless-stopped

  postgres-assistant:
    image: postgres:15
    platform: linux/arm64
    container_name: postgres-assistant
    profiles: ["local-db"]  # Only runs when DB_TYPE=local
    environment:
      POSTGRES_DB: cicd_assistant
      POSTGRES_USER: ${DB_USER:-cicd_assistant}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_assistant_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cicd_assistant}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devops-network

  redis:
    image: redis:alpine
    container_name: redis
    profiles: ["local-queue"]  # Only runs when QUEUE_TYPE=redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devops-network

  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: opensearch
    profiles: ["local-vector"]  # Only runs when VECTOR_STORE_TYPE=local
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - plugins.security.disabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
    networks:
      - devops-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    profiles: ["local-queue"]  # Only runs when QUEUE_TYPE=rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # GitLab (unchanged)
  gitlab:
    image: yrzr/gitlab-ce-arm64v8:18.0.4-ce.0
    container_name: gitlab
    hostname: 'gitlab'
    ports:
      - "8080:80"
      - "2222:22"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab:80'
        nginx['listen_port'] = 80
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        gitlab_rails['initial_root_password'] = 'Nitin3011'
        registry['enable'] = false
        gitlab_rails['registry_enabled'] = false
        gitlab_ci['gitlab_ci_all_broken_builds'] = false
        gitlab_ci['gitlab_ci_disable_validates_dependencies'] = true
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_host'] = 'postgres-gitlab'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = 'gitlab123'
        gitlab_rails['db_database'] = 'gitlabhq_production'
        postgresql['enable'] = false
        gitlab_rails['auto_migrate'] = true
        puma['worker_processes'] = 2
        sidekiq['max_concurrency'] = 5
        postgresql['shared_buffers'] = "256MB"
        prometheus_monitoring['enable'] = false
        alertmanager['enable'] = false
        registry['enable'] = false
        gitlab_pages['enable'] = false
        gitlab_kas['enable'] = false
        mattermost['enable'] = false
        redis['enable'] = false
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_port'] = 6379
        gitlab_rails['webhook_timeout'] = 60
        gitlab_rails['trusted_proxies'] = ['127.0.0.1', '172.0.0.0/8']
        gitlab_rails['outbound_local_requests_whitelist'] = ['0.0.0.0/0', '::/0']
        gitlab_rails['allow_local_requests_from_web_hooks_and_services'] = true
        gitlab_rails['allow_local_requests_from_system_hooks'] = true
    depends_on:
      postgres-gitlab:
        condition: service_healthy
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    networks:
      - devops-network
    restart: unless-stopped

  gitlab-runner:
    build:
      context: .
      dockerfile: Dockerfile.gitlab-runner
    container_name: gitlab-runner
    platform: linux/arm64
    privileged: true
    dns:
      - 8.8.8.8
      - 1.1.1.1
    depends_on:
      gitlab:
        condition: service_started
    volumes:
      - gitlab_runner_config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /Users/nitin/.colima:/colima:ro
      - /Users/nitin/Envathon_Project_Setup:/builds:rw
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
      DOCKER_TLS_CERTDIR: ""
      CI_SERVER_URL: http://gitlab:80
      DOCKER_DRIVER: overlay2
      DOCKER_TLS_VERIFY: "false"
      DOCKER_CERT_PATH: ""
    networks:
      - devops-network
    restart: unless-stopped
    user: "0:0"

  sonarqube:
    image: sonarqube:9.9-community
    platform: linux/amd64
    container_name: sonarqube
    ports:
      - "9001:9000"
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
      SONAR_JDBC_URL: jdbc:postgresql://postgres-sonar:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar123
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      postgres-sonar:
        condition: service_healthy
    networks:
      - devops-network
    restart: unless-stopped

  # Webhook Handler Service
  webhook-handler:
    build:
      context: ./webhook-handler
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: webhook-handler
    env_file: .env  # Load all settings from .env
    environment:
      - PORT=8090
    ports:
      - "8090:8090"
    volumes:
      - ./logs:/app/logs
    networks:
      - devops-network
    restart: unless-stopped

  # Strands Agent with flexible backends
  strands-agent:
    build:
      context: ./strands-agent
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: strands-agent
    env_file: .env  # Load all settings from .env
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - devops-network
    restart: unless-stopped
    
  streamlit-ui:
    build:
      context: ./streamlit-ui
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: streamlit-ui
    depends_on:
      - strands-agent
    environment:
      - STREAMLIT_API_URL=http://strands-agent:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8501:8501"
    volumes:
      - ./logs:/app/logs
    networks:
      - devops-network
    restart: unless-stopped

networks:
  devops-network:
    driver: bridge

volumes:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_runner_config:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  redis_data:
  postgres_gitlab_data:
  postgres_sonar_data:
  postgres_assistant_data:
  opensearch_data:
  rabbitmq_data: